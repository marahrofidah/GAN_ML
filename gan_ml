{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9243,"sourceType":"datasetVersion","datasetId":2243}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/zahrasyifaul/gan-ml?scriptVersionId=256398631\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# import library","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 2. Setup & Import Library\n# =============================================================================\n# Sel ini berisi semua library yang kita butuhkan.\n# torch & torchvision: untuk membangun model, memuat data, dan transformasi.\n# matplotlib.pyplot: untuk visualisasi loss dan gambar.\n# os: untuk membuat direktori (folder).\n# =============================================================================\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import save_image\nimport matplotlib.pyplot as plt\nimport torchvision.datasets as datasets\nfrom torchvision import transforms\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.32986Z","iopub.execute_input":"2025-08-17T07:10:55.330437Z","iopub.status.idle":"2025-08-17T07:10:55.334868Z","shell.execute_reply.started":"2025-08-17T07:10:55.330414Z","shell.execute_reply":"2025-08-17T07:10:55.334199Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# hyperparameter","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 3. Konfigurasi & Hyperparameter\n# =============================================================================\n# Menyimpan semua parameter di satu tempat agar mudah diubah.\n# - epochs: Berapa kali kita melatih model pada seluruh dataset.\n# - lr: Learning rate, seberapa cepat model belajar.\n# - batch_size: Jumlah data yang diproses dalam satu iterasi.\n# - latent_dim: Ukuran vektor noise acak sebagai input untuk Generator.\n# - image_size: Ukuran gambar MNIST (28x28 = 784 piksel).\n# - device: Menggunakan GPU ('cuda') jika tersedia, jika tidak pakai CPU.\n# =============================================================================\n\nepochs = 100\nlr = 0.0002\nbatch_size = 128\nlatent_dim = 100 # Dimensi input noise untuk generator\nimage_size = 28 * 28 # 784\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# Membuat folder untuk menyimpan gambar hasil generate\nif not os.path.exists('generated_images'):\n    os.makedirs('generated_images')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.336109Z","iopub.execute_input":"2025-08-17T07:10:55.3363Z","iopub.status.idle":"2025-08-17T07:10:55.35677Z","shell.execute_reply.started":"2025-08-17T07:10:55.336285Z","shell.execute_reply":"2025-08-17T07:10:55.356111Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# load dataset fashion mnist","metadata":{}},{"cell_type":"code","source":"# 1. Definisikan transform-nya. Pastikan ada transforms.ToTensor()\ntransform = transforms.Compose([\n    transforms.ToTensor(), # WAJIB: Mengubah gambar PIL menjadi Tensor\n    transforms.Normalize(mean=[0.5], std=[0.5]) # Normalisasi nilai piksel ke [-1, 1]\n])\n\n# 2. Terapkan transform ke dataset saat inisialisasi\ntrain_dataset = datasets.FashionMNIST(\n    root='./data/',\n    train=True,\n    transform=transform,  # <<< PASTIKAN BARIS INI ADA\n    download=True\n)\n\n# 3. Buat DataLoader seperti biasa\ntrain_loader = DataLoader(\n    dataset=train_dataset,\n    batch_size=128, # Sesuaikan dengan batch_size-mu\n    shuffle=True\n)\n\nprint(\"Dataset dan DataLoader siap digunakan!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.357386Z","iopub.execute_input":"2025-08-17T07:10:55.35756Z","iopub.status.idle":"2025-08-17T07:10:55.453943Z","shell.execute_reply.started":"2025-08-17T07:10:55.357546Z","shell.execute_reply":"2025-08-17T07:10:55.45317Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# load GAN model","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 5. Mendefinisikan Arsitektur Model\n# =============================================================================\n\n# --- Generator ---\n# Menerima input vektor noise (latent_dim) dan menghasilkan gambar palsu\n# seukuran gambar asli (image_size).\n# - Linear layer: Lapisan fully-connected.\n# - LeakyReLU: Fungsi aktivasi yang membantu mengatasi \"dying ReLU problem\".\n# - Tanh: Fungsi aktivasi terakhir untuk menghasilkan output antara -1 dan 1,\n#   sesuai dengan normalisasi data kita.\n# =============================================================================\n\nclass Generator(nn.Module):\n    def __init__(self):\n        super(Generator, self).__init__()\n        self.model = nn.Sequential(\n            nn.Linear(latent_dim, 256),\n            nn.LeakyReLU(0.2),\n            nn.Linear(256, 512),\n            nn.LeakyReLU(0.2),\n            nn.Linear(512, 1024),\n            nn.LeakyReLU(0.2),\n            nn.Linear(1024, image_size),\n            nn.Tanh() # Output antara -1 dan 1\n        )\n\n    def forward(self, x):\n        return self.model(x)\n\n# =============================================================================\n# --- Discriminator ---\n# Menerima input gambar (image_size) dan menghasilkan probabilitas 0 (palsu) atau 1 (asli).\n# - Sigmoid: Fungsi aktivasi terakhir untuk menghasilkan output probabilitas (0-1).\n# =============================================================================\n\nclass Discriminator(nn.Module):\n    def __init__(self):\n        super(Discriminator, self).__init__()\n        self.model = nn.Sequential(\n            nn.Linear(image_size, 512),\n            nn.LeakyReLU(0.2),\n            nn.Linear(512, 256),\n            nn.LeakyReLU(0.2),\n            nn.Linear(256, 1),\n            nn.Sigmoid() # Output probabilitas\n        )\n\n    def forward(self, x):\n        return self.model(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.454796Z","iopub.execute_input":"2025-08-17T07:10:55.455048Z","iopub.status.idle":"2025-08-17T07:10:55.461592Z","shell.execute_reply.started":"2025-08-17T07:10:55.45503Z","shell.execute_reply":"2025-08-17T07:10:55.461058Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# inisialisasi loss n optimizer","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 6. Inisialisasi Model, Loss, dan Optimizer (Perbaikan)\n# =============================================================================\n\ngenerator = Generator().to(device)\ndiscriminator = Discriminator().to(device)\n\ncriterion = nn.BCELoss()\n\n# ðŸ”§ Perbaikan utama:\n# - Discriminator pakai LR lebih kecil supaya tidak terlalu dominan\n# - Generator LR sedikit lebih besar agar bisa mengejar\noptimizer_g = optim.Adam(generator.parameters(), lr=0.0002, betas=(0.5, 0.999))  # G belajar lebih agresif\noptimizer_d = optim.Adam(discriminator.parameters(), lr=0.00005, betas=(0.5, 0.999))  # D lebih lambat\n\n# Vektor noise tetap untuk evaluasi progress\nfixed_noise = torch.randn(64, latent_dim).to(device)\n\n# List untuk simpan history loss\ng_losses = []\nd_losses = []","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.463133Z","iopub.execute_input":"2025-08-17T07:10:55.46341Z","iopub.status.idle":"2025-08-17T07:10:55.503935Z","shell.execute_reply.started":"2025-08-17T07:10:55.463393Z","shell.execute_reply":"2025-08-17T07:10:55.503147Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# training loop","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 7. Training Loop (Perbaikan)\n# =============================================================================\nprint(\"Memulai proses training dengan perbaikan...\")\nfor epoch in range(epochs):\n    for i, (real_images, _) in enumerate(train_loader):\n        real_images = real_images.view(-1, image_size).to(device)\n        batch_size_current = real_images.shape[0]\n        \n        # ðŸ”§ Perbaikan 1: Label smoothing untuk real (bukan 1.0 tapi 0.9)\n        real_labels = torch.full((batch_size_current, 1), 0.9, device=device)  \n        fake_labels = torch.zeros(batch_size_current, 1).to(device)\n\n        # ---------------------\n        #  Latih Discriminator\n        # ---------------------\n        optimizer_d.zero_grad()\n        \n        # Loss gambar asli\n        outputs_real = discriminator(real_images)\n        d_loss_real = criterion(outputs_real, real_labels)\n\n        # Loss gambar palsu\n        noise = torch.randn(batch_size_current, latent_dim).to(device)\n        fake_images = generator(noise)\n        outputs_fake = discriminator(fake_images.detach())\n        d_loss_fake = criterion(outputs_fake, fake_labels)\n\n        # Total loss D\n        d_loss = d_loss_real + d_loss_fake\n            optimizer_d.step()\n\n        # -----------------\n        #  Latih Generator\n        # -----------------\n        optimizer_g.zero_grad()\n\n        # ðŸ”§ Perbaikan 2: Label smoothing juga bisa dipakai untuk target G â†’ gunakan 1.0 tapi kadang digeser sedikit\n        # Misalnya pakai target random antara 0.8 - 1.0 agar training lebih stabil\n        smooth_real = torch.empty(batch_size_current, 1, device=device).uniform_(0.8, 1.0)\n        outputs_fake_for_g = discriminator(fake_images)\n        g_loss = criterion(outputs_fake_for_g, smooth_real)\n\n        g_loss.backward()\n        optimizer_g.step()\n\n    # Simpan history loss\n    g_losses.append(g_loss.item())\n    d_losses.append(d_loss.item())\n        \n    if (epoch+1) % 5 == 0:\n        print(f\"Epoch [{epoch+1}/{epochs}], D Loss: {d_loss.item():.4f}, G Loss: {g_loss.item():.4f}\")\n        \n        with torch.no_grad():\n            generated_images = generator(fixed_noise).view(-1, 1, 28, 28)\n            save_image(generated_images, f\"generated_images/epoch_{epoch+1}.png\", normalize=True)\n\ntorch.save(generator.state_dict(), 'generator_fixed.pth')\ntorch.save(discriminator.state_dict(), 'discriminator_fixed.pth')\nprint(\"Training selesai (versi perbaikan) dan model disimpan.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:10:55.539216Z","iopub.execute_input":"2025-08-17T07:10:55.539862Z","iopub.status.idle":"2025-08-17T07:30:43.605263Z","shell.execute_reply.started":"2025-08-17T07:10:55.539838Z","shell.execute_reply":"2025-08-17T07:30:43.604656Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# evaluasi hasil","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ## 8. Visualisasi Hasil\n# =============================================================================\nplt.figure(figsize=(10, 5))\nplt.title(\"Generator and Discriminator Loss During Training (Fixed)\")\nplt.plot(g_losses, label=\"G\")\nplt.plot(d_losses, label=\"D\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\n\nfrom IPython.display import Image\nImage(f'generated_images/epoch_{epochs}.png')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T07:30:43.606525Z","iopub.execute_input":"2025-08-17T07:30:43.606831Z","iopub.status.idle":"2025-08-17T07:30:43.784753Z","shell.execute_reply.started":"2025-08-17T07:30:43.606808Z","shell.execute_reply":"2025-08-17T07:30:43.78413Z"}},"outputs":[],"execution_count":null}]}